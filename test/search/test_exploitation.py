import math
import unittest
from pathlib import Path

from src.game.battlesnake.battlesnake import BattleSnakeGame
from src.game.bootcamp.test_envs_3x3 import perform_choke_2_player
from src.game.bootcamp.test_envs_5x5 import perform_choke_5x5_4_player
from src.network.fcn import MediumHeadConfig
from src.network.initialization import get_network_from_config
from src.network.mobilenet_v3 import MobileNetConfig3x3
from src.network.vision_net import EquivarianceType
from src.search.config import EnemyExploitationEvalConfig, EnemyExploitationBackupConfig, SpecialExtractConfig, \
    FixedDepthConfig
from src.search.fixed_depth import FixedDepthSearch


class TestExploitation(unittest.TestCase):
    def test_choke_obs(self):
        enemy_path = Path(__file__).parent.parent.parent / 'trained_models' / 'choke_obs_proxy.pt'

        game_cfg = perform_choke_2_player(centered=True, fully_connected=False)
        game_cfg.ec.single_temperature_input = False
        game_cfg.ec.temperature_input = True

        player_net_cfg = MobileNetConfig3x3(
            predict_policy=True,
            predict_game_len=False,
            eq_type=EquivarianceType.NONE,
            game_cfg=game_cfg,
            film_temperature_input=False,
        )
        net = get_network_from_config(player_net_cfg)

        eval_conf = EnemyExploitationEvalConfig(
            enemy_net_path=str(enemy_path),
            obs_temperature_input=True,
            net_cfg=player_net_cfg,
        )
        backup_conf = EnemyExploitationBackupConfig(
            enemy_net_path=str(enemy_path),
            exploit_temperature=5,
        )
        extract_conf = SpecialExtractConfig()
        search_cfg = FixedDepthConfig(
            eval_func_cfg=eval_conf,
            backup_func_cfg=backup_conf,
            extract_func_cfg=extract_conf,
            average_eval=True,
        )

        game = BattleSnakeGame(game_cfg)
        search = FixedDepthSearch(search_cfg)
        search.set_temperatures([1, 5])

        game.render()
        for _ in range(3):
            values, probs, _ = search(game, iterations=1)
            print(f"{values=}")
            print(f"{probs=}")
            game.step((0, 0))
            game.render()

    def test_choke_obs_inf(self):
        enemy_path = Path(__file__).parent.parent.parent / 'trained_models' / 'choke_obs_proxy.pt'

        game_cfg = perform_choke_2_player(centered=True, fully_connected=False)
        game_cfg.ec.single_temperature_input = False
        game_cfg.ec.temperature_input = True

        player_net_cfg = MobileNetConfig3x3(
            predict_policy=True,
            predict_game_len=False,
            eq_type=EquivarianceType.NONE,
            game_cfg=game_cfg,
            film_temperature_input=False,
        )

        eval_conf = EnemyExploitationEvalConfig(
            enemy_net_path=str(enemy_path),
            obs_temperature_input=True,
            net_cfg=player_net_cfg,
        )
        backup_conf = EnemyExploitationBackupConfig(
            enemy_net_path=str(enemy_path),
            exploit_temperature=math.inf,
        )
        extract_conf = SpecialExtractConfig()
        search_cfg = FixedDepthConfig(
            eval_func_cfg=eval_conf,
            backup_func_cfg=backup_conf,
            extract_func_cfg=extract_conf,
            average_eval=True,
        )

        game = BattleSnakeGame(game_cfg)
        search = FixedDepthSearch(search_cfg)
        search.set_temperatures([1, 5])

        game.render()
        for _ in range(3):
            values, probs, _ = search(game, iterations=1)
            print(f"{values=}")
            print(f"{probs=}")
            game.step((0, 0))
            game.render()

    def test_choke_film(self):
        enemy_path = Path(__file__).parent.parent.parent / 'trained_models' / 'choke_film_proxy.pt'

        game_cfg = perform_choke_2_player(centered=True, fully_connected=False)
        game_cfg.ec.temperature_input = False

        player_net_cfg = MobileNetConfig3x3(
            predict_policy=True,
            predict_game_len=False,
            eq_type=EquivarianceType.NONE,
            game_cfg=game_cfg,
            film_temperature_input=True,
            film_cfg=MediumHeadConfig(),
        )

        eval_conf = EnemyExploitationEvalConfig(
            enemy_net_path=str(enemy_path),
            obs_temperature_input=False,
            net_cfg=player_net_cfg,
        )
        backup_conf = EnemyExploitationBackupConfig(
            enemy_net_path=str(enemy_path),
            exploit_temperature=10,
        )
        extract_conf = SpecialExtractConfig()
        search_cfg = FixedDepthConfig(
            eval_func_cfg=eval_conf,
            backup_func_cfg=backup_conf,
            extract_func_cfg=extract_conf,
            average_eval=True,
        )

        game = BattleSnakeGame(game_cfg)
        search = FixedDepthSearch(search_cfg)
        search.set_temperatures([1, 5])

        game.render()
        for _ in range(3):
            values, probs, _ = search(game, iterations=1)
            print(f"{values=}")
            print(f"{probs=}")
            game.step((0, 0))
            game.render()

    def test_4p_choke_obs(self):
        enemy_path = Path(__file__).parent.parent.parent / 'trained_models' / '4p_choke_obs_proxy.pt'

        game_cfg = perform_choke_5x5_4_player(centered=True)
        game_cfg.ec.single_temperature_input = True
        game_cfg.ec.temperature_input = True

        player_net_cfg = MobileNetConfig3x3(
            predict_policy=True,
            predict_game_len=False,
            eq_type=EquivarianceType.NONE,
            game_cfg=game_cfg,
            film_temperature_input=False,
        )

        eval_conf = EnemyExploitationEvalConfig(
            enemy_net_path=str(enemy_path),
            obs_temperature_input=True,
            net_cfg=player_net_cfg,
        )
        backup_conf = EnemyExploitationBackupConfig(
            enemy_net_path=str(enemy_path),
            exploit_temperature=5,
        )
        extract_conf = SpecialExtractConfig()
        search_cfg = FixedDepthConfig(
            eval_func_cfg=eval_conf,
            backup_func_cfg=backup_conf,
            extract_func_cfg=extract_conf,
            average_eval=True,
        )

        game = BattleSnakeGame(game_cfg)
        search = FixedDepthSearch(search_cfg)
        search.set_temperatures([1, 3, 5, 7])

        game.render()
        values, probs, _ = search(game, iterations=1)
        print(f"{values=}")
        print(f"{probs=}")

        game.step((0, 0, 3, 0))
        game.render()
        values, probs, _ = search(game, iterations=1)
        print(f"{values=}")
        print(f"{probs=}")

        game.step((3, 0, 0))
        game.render()
        values, probs, _ = search(game, iterations=1)
        print(f"{values=}")
        print(f"{probs=}")
#
#     def test_4p_choke_film(self):
#         enemy_path = Path(__file__).parent.parent.parent / 'trained_models' / '4p_choke_film.pt'
#
#         game_cfg = perform_choke_5x5_4_player(centered=True)
#         game_cfg.ec.single_temperature_input = False
#         game_cfg.ec.temperature_input = False
#
#         player_net_cfg = MobileNetConfig3x3(
#             predict_policy=True,
#             predict_game_len=False,
#             eq_type=EquivarianceType.NONE,
#             game_cfg=game_cfg,
#             film_temperature_input=True,
#             single_film_temperature=False,
#             film_cfg=MediumHeadConfig(),
#         )
#
#         eval_conf = EnemyExploitationEvalConfig(
#             enemy_net_path=str(enemy_path),
#             obs_temperature_input=False,
#             net_cfg=player_net_cfg,
#         )
#         backup_conf = EnemyExploitationBackupConfig(
#             enemy_net_path=str(enemy_path),
#             exploit_temperature=5,
#             average_eval=False,
#         )
#         extract_conf = SpecialExtractConfig()
#         search_cfg = FixedDepthConfig(
#             eval_func_cfg=eval_conf,
#             backup_func_cfg=backup_conf,
#             extract_func_cfg=extract_conf,
#             average_eval=True,
#         )
#
#         game = BattleSnakeGame(game_cfg)
#         search = FixedDepthSearch(search_cfg)
#         search.set_temperatures([1, 3, 5, 7])
#
#         game.render()
#         values, probs, _ = search(game, iterations=1)
#         print(f"{values=}")
#         print(f"{probs=}")
#
#         game.step((0, 0, 3, 0))
#         game.render()
#         values, probs, _ = search(game, iterations=1)
#         print(f"{values=}")
#         print(f"{probs=}")
#
#         game.step((3, 0, 0))
#         game.render()
#         values, probs, _ = search(game, iterations=1)
#         print(f"{values=}")
#         print(f"{probs=}")
