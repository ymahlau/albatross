import unittest
from enum import Enum

from src.game.initialization import get_game_from_config
from src.game.overcooked.config import CrampedRoomOvercookedConfig
from src.game.overcooked.overcooked import OvercookedGame


class TestOvercookedGame(unittest.TestCase):
    def test_init_print(self):
        game_cfg = CrampedRoomOvercookedConfig()
        game = OvercookedGame(game_cfg)
        game.render()
        game.step((0, 2))
        game.render()
        game.step((3, 5))
        game.render()

    def test_put_in_pot(self):
        game_cfg = CrampedRoomOvercookedConfig()
        game = OvercookedGame(game_cfg)
        game.render()
        game.step((0, 2))
        game.render()
        game.step((3, 5))
        game.render()
        game.step((5, 3))
        game.render()
        reward, _, _ = game.step((4, 0))
        print(reward)
        game.render()
        reward, _, _ = game.step((4, 5))
        print(reward)
        game.render()
        obs, _, _ = game.get_obs()
        print(obs.shape)

    def test_cooking(self):
        game_cfg = CrampedRoomOvercookedConfig()
        game = OvercookedGame(game_cfg)
        game.step((0, 2))
        game.step((3, 5))
        game.step((5, 3))
        game.step((4, 0))
        game.step((4, 5))
        game.render()
        game.step((2, 2))
        game.render()
        game.step((0, 5))
        game.render()
        game.step((5, 4))
        game.render()
        game.step((3, 3))
        game.render()
        game.step((1, 0))
        game.render()
        game.step((5, 5))
        game.render()
        game.step((5, 5))
        game.render()
        for _ in range(20):
            game.step((4, 4))
            game.render()
        print(game.get_cum_rewards())
        obs, _, _ = game.get_obs()
        print(obs.shape)

    def test_delivery(self):
        game_cfg = CrampedRoomOvercookedConfig()
        game = OvercookedGame(game_cfg)
        game.step((0, 2))
        game.step((3, 5))
        game.step((5, 3))
        game.step((4, 0))
        game.step((4, 5))
        game.step((2, 2))
        game.step((0, 5))
        game.step((5, 4))
        game.step((3, 3))
        game.step((1, 0))
        game.step((4, 5))
        game.step((4, 5))
        game.render()
        reward, _, _ = game.step((5, 4))
        game.render()
        print(reward)
        for _ in range(20):
            game.step((4, 4))
        game.render()
        game.step((2, 2))
        game.render()
        game.step((0, 1))
        game.render()
        game.step((5, 3))
        game.render()
        game.step((2, 4))
        game.render()
        game.step((1, 4))
        game.render()
        obs, _, _ = game.get_obs()
        print(game.get_cum_rewards())
        game.step((5, 4))
        game.render()
        obs, _, _ = game.get_obs()
        print(game.get_cum_rewards())

    def test_copy(self):
        game_cfg = CrampedRoomOvercookedConfig()
        game = OvercookedGame(game_cfg)
        game2 = OvercookedGame.get_copy(game)
        game.render()
        game2.render()
        print('##############################')
        game.step((2, 2))
        game.render()
        game2.render()
        print('##############################')
        game.reset()
        game.render()
        game2.render()
        print('##############################')

    def test_obs(self):
        game_cfg = CrampedRoomOvercookedConfig()
        game = OvercookedGame(game_cfg)
        obs, _, _ = game.get_obs()
        self.assertEqual(2, obs.shape[0])
        self.assertEqual(5, obs.shape[1])
        self.assertEqual(5, obs.shape[2])
        self.assertEqual(16, obs.shape[3])

    def test_equals(self):
        game_cfg = CrampedRoomOvercookedConfig()
        game = get_game_from_config(game_cfg)
        game2 = get_game_from_config(game_cfg)
        self.assertEqual(game, game2)
        game.step((0, 0))
        self.assertNotEquals(game, game2)
        game3 = game.get_copy()
        self.assertEqual(game, game3)
        self.assertNotEquals(game3, game2)
        game3.reset()
        self.assertEqual(game3, game2)



